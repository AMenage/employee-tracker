/*
 * Code written by Alexander Menage
 * Created 2015-04-13
 * 
 * This program utilizes a form application with SQLite.
 * It will receive the name of an employee, their ID,
 * the book they are selling (ISBN, Title, and Author),
 * where the book is being sold, how many copies of the book
 * is sold, and the price of each copy. The employee's information
 * will be saved into one table of the database, while the book's
 * information will be saved into another table of the database
 * 
 * Database: sbc.db (Single-Board Computer). The database
 * is located in the project's root folder (Final).
 */
package finalProgram;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

/**
 *
 * @author Alexander
 */
public class FinalUI extends javax.swing.JFrame {

    /**
     * Creates new form FinalUI
     */
    public FinalUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        txtEmployeeId = new javax.swing.JTextField();
        txtEmployeeFirstName = new javax.swing.JTextField();
        txtEmployeeLastName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btnEnterEmployee = new javax.swing.JButton();
        txtBookId = new javax.swing.JTextField();
        txtBookTitle = new javax.swing.JTextField();
        txtAuthor = new javax.swing.JTextField();
        txtCost = new javax.swing.JTextField();
        txtStock = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        btnEnterBook = new javax.swing.JButton();
        btnRetrieveEmployee = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        txtWagePerHour = new javax.swing.JTextField();
        txtSalaryPerYear = new javax.swing.JTextField();
        txtRetrieveBook = new javax.swing.JButton();
        txtUpdateEmployee = new javax.swing.JButton();
        btnUpdateBook = new javax.swing.JButton();
        lblIdCheck = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtEmployeeId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmployeeIdActionPerformed(evt);
            }
        });

        txtEmployeeFirstName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmployeeFirstNameActionPerformed(evt);
            }
        });

        jLabel2.setText("Employee First Name:");

        jLabel3.setText("Employee Last Name:");

        jLabel4.setText("Employee ID:");

        btnEnterEmployee.setText("Enter Employee");
        btnEnterEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnterEmployeeActionPerformed(evt);
            }
        });

        jLabel5.setText("Book ISBN:");

        jLabel6.setText("Book Title:");

        jLabel7.setText("Author:");

        jLabel8.setText("Price per Book:");

        jLabel9.setText("Book Count:");

        btnEnterBook.setText("Enter Book");
        btnEnterBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnterBookActionPerformed(evt);
            }
        });

        btnRetrieveEmployee.setText("Retrieve Employee");
        btnRetrieveEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRetrieveEmployeeActionPerformed(evt);
            }
        });

        jLabel11.setText("Hourly Wage:");

        jLabel12.setText("Annual Salary:");

        txtRetrieveBook.setText("Retrieve Book");
        txtRetrieveBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRetrieveBookActionPerformed(evt);
            }
        });

        txtUpdateEmployee.setText("Update Employee");
        txtUpdateEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUpdateEmployeeActionPerformed(evt);
            }
        });

        btnUpdateBook.setText("Update Book");
        btnUpdateBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateBookActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel11)
                                    .addComponent(jLabel12))
                                .addGap(14, 14, 14))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtEmployeeId, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE)
                            .addComponent(txtEmployeeFirstName)
                            .addComponent(txtEmployeeLastName)
                            .addComponent(txtBookId)
                            .addComponent(txtBookTitle)
                            .addComponent(txtAuthor)
                            .addComponent(txtCost)
                            .addComponent(txtStock)
                            .addComponent(txtWagePerHour)
                            .addComponent(txtSalaryPerYear))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnEnterEmployee, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnEnterBook, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnRetrieveEmployee, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtRetrieveBook, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtUpdateEmployee, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnUpdateBook, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblIdCheck)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtEmployeeId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnEnterEmployee)
                            .addComponent(txtEmployeeFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))))
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtEmployeeLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtWagePerHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12)
                            .addComponent(txtSalaryPerYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtBookId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtBookTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnRetrieveEmployee)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtUpdateEmployee)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnEnterBook)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(txtRetrieveBook))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtStock, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(btnUpdateBook))
                .addGap(18, 18, 18)
                .addComponent(lblIdCheck)
                .addGap(8, 8, 8))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(lblStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /*
     * When Enter Employee button is activated, save the employee's 
     * information into the database and welcome them.
     */
    private void btnEnterEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnterEmployeeActionPerformed
        // TODO add your handling code here:
        
        // when the Salary type is selected
        if ("0.00".equals(txtWagePerHour.getText())) {
            String firstName = txtEmployeeFirstName.getText();              // get the first name from the first name text box
            String lastName  = txtEmployeeLastName.getText();               // get the last name from the last name text box
            int id           = Integer.parseInt(txtEmployeeId.getText());   // get the employee ID from the ID text box
            float salary     = Float.parseFloat(txtSalaryPerYear.getText());// get the employee's salary from the salary text box
            float wage       = 0;                                           // hourly rate remains 0 in this case
        
            /*
             Check to see whether or not the employee's information is valid.
            */
            boolean valid = true;
            for (char e : firstName.toCharArray()) 
                if (!Character.isLetter(e)) 
                    valid = false;
            
            for (char e : lastName.toCharArray()) 
                if (!Character.isLetter(e)) 
                    valid = false;
        
            for (char e : txtEmployeeId.getText().toCharArray()) 
                if (Character.isLetter(e)) 
                    valid = false;
        
            for (char e : txtSalaryPerYear.getText().toCharArray()) 
                if (Character.isLetter(e)) 
                    valid = false;
        
            for (char e : txtWagePerHour.getText().toCharArray()) 
                if (Character.isLetter(e)) 
                    valid = false;
            
            checkEmployeeSql(id);
            
            if (!lblIdCheck.getText().isEmpty())
                lblStatus.setText(lblIdCheck.getText() + " already exists.");
            
            /*
                If the employee's information is invalid, remind the user
                and do not add the employee to the list.
            */
            if (!valid) 
                lblStatus.setText("Invalid information.");
            
            /*
                If the employee's information is valid, enter the employee to the database.
            */
        else {
            // enter the employee's information if they are working in Salary
            employeeSalary employee = new employeeSalary(
                    lastName, 
                    firstName, 
                    id,
                    salary);
        
            // welcome the employee
            System.out.println(employee.toString());
            lblStatus.setText(employee.toString());
            // save the employee's data into the database
            employee.insertEmployeeSql
                    (id,
                    lastName,
                    firstName,
                    wage,
                    salary);
            }
        }
        
        // when the Hourly type is selected
        if ("0.00".equals(txtSalaryPerYear.getText())) {
            String firstName = txtEmployeeFirstName.getText();              // get the first name from the first name text box
            String lastName  = txtEmployeeLastName.getText();               // get the last name from the last name text box
            int id           = Integer.parseInt(txtEmployeeId.getText());   // get the employee ID from the ID text box
            float salary     = 0;                                           // salary remains 0 in this case
            float wage       = Float.parseFloat(txtWagePerHour.getText());  // get the hourly wage from the wage text box
        
            /*
             Check to see whether or not the employee's information is valid.
            */
            boolean valid = true;
            for (char e : firstName.toCharArray()) 
                if (!Character.isLetter(e)) 
                    valid = false;
            
            for (char e : lastName.toCharArray()) 
                if (!Character.isLetter(e)) 
                    valid = false;
        
            for (char e : txtEmployeeId.getText().toCharArray()) 
                if (Character.isLetter(e)) 
                    valid = false;
        
            for (char e : txtSalaryPerYear.getText().toCharArray()) 
                if (Character.isLetter(e)) 
                    valid = false;
        
            for (char e : txtWagePerHour.getText().toCharArray()) 
                if (Character.isLetter(e)) 
                    valid = false;
            
            checkEmployeeSql(id);
            
            if (!lblIdCheck.getText().isEmpty())
                lblStatus.setText(lblIdCheck.getText() + " already exists.");
            
            /*
                If the employee's information is invalid, remind the user
                and do not add the employee to the list.
            */
            if (!valid) 
                lblStatus.setText("Invalid information.");
            
            /*
                If the employee's information is valid, enter the employee to the database.
            */
        else {
            // enter the employee's information if they are working in Salary
            employeeHourly employee = new employeeHourly(
                    lastName, 
                    firstName, 
                    id,
                    wage);
        
            // welcome the employee
            System.out.println(employee.toString());
            lblStatus.setText(employee.toString());
            // save the employee's data into the database
            employee.insertEmployeeSql
                    (id,
                    lastName,
                    firstName,
                    wage,
                    salary);
            }
        }
    }//GEN-LAST:event_btnEnterEmployeeActionPerformed

    /*
     * When the Enter Book button is activated, save the book's
     * information and track the employee who sold the book.
     */
    private void btnEnterBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnterBookActionPerformed
        // TODO add your handling code here:  
        
            String bookId        = txtBookId.getText();                         // get the book's ISBN from the ISBN text box
            String bookTitle     = txtBookTitle.getText();                      // get the book's title from the book title text box
            String bookAuthor    = txtAuthor.getText();                         // get the author's name from the author text box
            float  bookPrice     = Float.parseFloat(txtCost.getText());         // get the book's price from the cost text box
            int    bookCount     = Integer.parseInt(txtStock.getText());        // get the book's stock from the stock text box
            
            /*
             Check to see whether or not the employee's information is valid.
            */
            boolean valid = true;
            for (char e : bookId.toCharArray()) 
                if (Character.isLetter(e)) 
                    valid = false;
        
            for (char e : bookAuthor.toCharArray()) 
                if (!Character.isLetter(e)) 
                    valid = false;
        
            for (char e : txtCost.getText().toCharArray()) 
                if (Character.isLetter(e)) 
                    valid = false;
        
            for (char e : txtStock.getText().toCharArray()) 
                if (Character.isLetter(e)) 
                    valid = false;
            
            checkBookSql(bookId);
            
            if (!lblIdCheck.getText().isEmpty())
                lblStatus.setText(lblIdCheck.getText() + " already exists.");
            
            /*
                If the employee's information is invalid, remind the user
                and do not add the employee to the list.
            */
            if (!valid) 
                lblStatus.setText("Invalid information.");
            
            /*
                If the employee's information is valid, enter the employee to the database.
            */
        else {
            
            // enter the book's information
            Book book = new Book(
                    bookId,
                    bookTitle,
                    bookAuthor,
                    bookPrice,
                    bookCount);
            
            // notify what book is in stock
            System.out.println(book.toString());
            lblStatus.setText(book.toString());
            // enter the book's information onto the database
            book.insertBookSql
                    (bookId,
                    bookTitle,
                    bookAuthor,
                    bookPrice,
                    bookCount);
        }
    }//GEN-LAST:event_btnEnterBookActionPerformed

    // ignore this function
    private void txtEmployeeIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmployeeIdActionPerformed
        // TODO add your handling code here:        
    }//GEN-LAST:event_txtEmployeeIdActionPerformed

    /*
     * When the Retrieve Employee button is activated,
     * read the Employee table in the database according to the entered
     * ID and retrieve the employee's information.
     */
    private void btnRetrieveEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRetrieveEmployeeActionPerformed
        // TODO add your handling code here:
        int id = Integer.parseInt(txtEmployeeId.getText()); // get the employee ID from the ID text box
        String first = txtEmployeeFirstName.getText();
        String last  = txtEmployeeLastName.getText();
        
        /*
         * Call the retrieveEmployeeSql function to connect to the database
         * and retrieve the employee's information.
         */
        retrieveEmployeeSql(id);
        lblStatus.setText("Retrieved " + txtEmployeeFirstName.getText()
                + " " + txtEmployeeLastName.getText());
    }//GEN-LAST:event_btnRetrieveEmployeeActionPerformed

    // ignore this function
    private void txtEmployeeFirstNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmployeeFirstNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEmployeeFirstNameActionPerformed

    private void txtRetrieveBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRetrieveBookActionPerformed
        // TODO add your handling code here:
        String isbn = txtBookId.getText();
        String title = txtBookTitle.getText();
        
        retrieveBookSql(isbn);
        lblStatus.setText("Retrieved " + txtBookTitle.getText());
    }//GEN-LAST:event_txtRetrieveBookActionPerformed

    private void txtUpdateEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUpdateEmployeeActionPerformed
        // TODO add your handling code here:
        String firstName = txtEmployeeFirstName.getText();             
        String lastName  = txtEmployeeLastName.getText();               
        int id           = Integer.parseInt(txtEmployeeId.getText());   
        float salary     = Float.parseFloat(txtSalaryPerYear.getText());
        float wage       = Float.parseFloat(txtWagePerHour.getText());
        
        updateEmployeeSql(id, lastName, firstName, wage, salary);
        lblStatus.setText("Updated " + firstName + " " + lastName);
    }//GEN-LAST:event_txtUpdateEmployeeActionPerformed

    private void btnUpdateBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateBookActionPerformed
        // TODO add your handling code here:
        String bookId        = txtBookId.getText();                         
        String bookTitle     = txtBookTitle.getText();                      
        String bookAuthor    = txtAuthor.getText();                         
        float  bookPrice     = Float.parseFloat(txtCost.getText());         
        int    bookCount     = Integer.parseInt(txtStock.getText()); 
        
        updateBookSql(bookId, bookTitle, bookAuthor, bookPrice, bookCount);
        lblStatus.setText("Updated " + bookTitle);
    }//GEN-LAST:event_btnUpdateBookActionPerformed

    /*
     * Function to connect to the database and retrieve the employee's information.
     */
    public void retrieveEmployeeSql(int id) {
        Connection c = null;
        Statement stmt = null;
        try {
            /*
             * Connect to the database called sbc.db.
             */
            Class.forName("org.sqlite.JDBC");
            c = DriverManager.getConnection("jdbc:sqlite:sbc.db");
            c.setAutoCommit(false);
            System.out.println("Opened database successfully");
            
            /*
             * Retrieve the employee's information based on their ID.
             */
            stmt = c.createStatement();
            ResultSet rs = stmt.executeQuery
                    ( "SELECT * FROM Employees where Id=" +
                    id + ";" );
            int employeeId = rs.getInt(1);
            String FirstName = rs.getString(2);
            String LastName = rs.getString(3);
            float WagePerHour = rs.getFloat(4);
            float SalaryPerYear = rs.getFloat(5);
            txtEmployeeId.setText(Integer.toString(employeeId));
            txtEmployeeFirstName.setText(FirstName);
            txtEmployeeLastName.setText(LastName);
            txtSalaryPerYear.setText(Float.toString(SalaryPerYear));
            txtWagePerHour.setText(Float.toString(WagePerHour));
            
            // Finish the SQLite database interface
            rs.close();
            stmt.close();
            c.close();
        } catch ( Exception e ) {
            System.err.println( e.getClass().getName() + 
                    ": " + e.getMessage() );
            System.exit(0);
        }
        System.out.println("Operation done successfully");
    }
    
    public void checkEmployeeSql(int id) {
        Connection c = null;
        Statement stmt = null;
        try {
            /*
             * Connect to the database called sbc.db.
             */
            Class.forName("org.sqlite.JDBC");
            c = DriverManager.getConnection("jdbc:sqlite:sbc.db");
            c.setAutoCommit(false);
            System.out.println("Opened database successfully");
            
            /*
             * Retrieve the employee's information based on their ID.
             */
            stmt = c.createStatement();
            ResultSet rs = stmt.executeQuery
                    ( "SELECT * FROM Employees where Id=" +
                    id + ";" );
            int employeeId = rs.getInt(1);
            lblIdCheck.setText(Integer.toString(employeeId));
            
            // Finish the SQLite database interface
            rs.close();
            stmt.close();
            c.close();
        } catch ( Exception e ) {
            System.err.println( e.getClass().getName() + 
                    ": " + e.getMessage() );
            System.exit(0);
        }
        System.out.println("Operation done successfully");
    }
    
    public void retrieveBookSql(String isbn) {
        Connection c = null;
        Statement stmt = null;
        try {
            /*
             * Connect to the database called sbc.db.
             */
            Class.forName("org.sqlite.JDBC");
            c = DriverManager.getConnection("jdbc:sqlite:sbc.db");
            c.setAutoCommit(false);
            System.out.println("Opened database successfully");
            
            /*
             * Retrieve the employee's information based on their ID.
             */
            stmt = c.createStatement();
            ResultSet rs = stmt.executeQuery
                    ( "SELECT * FROM Books where ISBN='" +
                    isbn + "';" );
            String ISBN = rs.getString(1);
            String Title = rs.getString(2);
            String Author = rs.getString(3);
            float Price = rs.getFloat(4);
            int OnHandCount = rs.getInt(5);
            txtBookId.setText(ISBN);
            txtBookTitle.setText(Title);
            txtAuthor.setText(Author);
            txtCost.setText(Float.toString(Price));
            txtStock.setText(Integer.toString(OnHandCount));
            
            // Finish the SQLite database interface
            rs.close();
            stmt.close();
            c.close();
        } catch ( Exception e ) {
            System.err.println( e.getClass().getName() + 
                    ": " + e.getMessage() );
            System.exit(0);
        }
        System.out.println("Operation done successfully");
    }
    
    public void checkBookSql(String isbn) {
        Connection c = null;
        Statement stmt = null;
        try {
            /*
             * Connect to the database called sbc.db.
             */
            Class.forName("org.sqlite.JDBC");
            c = DriverManager.getConnection("jdbc:sqlite:sbc.db");
            c.setAutoCommit(false);
            System.out.println("Opened database successfully");
            
            /*
             * Retrieve the employee's information based on their ID.
             */
            stmt = c.createStatement();
            ResultSet rs = stmt.executeQuery
                    ( "SELECT * FROM Books where ISBN='" +
                    isbn + "';" );
            String ISBN = rs.getString(1);
            lblIdCheck.setText(isbn);
            
            // Finish the SQLite database interface
            rs.close();
            stmt.close();
            c.close();
        } catch ( Exception e ) {
            System.err.println( e.getClass().getName() + 
                    ": " + e.getMessage() );
            System.exit(0);
        }
        System.out.println("Operation done successfully");
    }
    
    public void updateEmployeeSql(
            int newEmployeeId,
            String newLastName,
            String newFirstName,
            float newWage,
            float newSalary) {
        Connection c = null;
        Statement stmt = null;
        try {
            Class.forName("org.sqlite.JDBC");
            c = DriverManager.getConnection("jdbc:sqlite:sbc.db");
            c.setAutoCommit(false);
            System.out.println("Opened database successfully");

            stmt = c.createStatement();
            String sql = "UPDATE Employees set LastName = '" + newLastName +
                    "', FirstName = '" + newFirstName +
                    "', WagePerHour = " + newWage + 
                    ", SalaryPerYear = " + newSalary +
                    " where ID=" + newEmployeeId + ";";
            stmt.executeUpdate(sql);
            c.commit();

            stmt.close();
            c.close();
        } catch ( Exception e ) {
             System.err.println( e.getClass().getName() + ": " + e.getMessage() );
            System.exit(0);
        }
        System.out.println("Operation done successfully");
    }
    
    public void updateBookSql(
            String bookISBN,
            String bookTitle,
            String bookAuthor,
            float bookPrice,
            int bookCount) {
        Connection c = null;
        Statement stmt = null;
        try {
            Class.forName("org.sqlite.JDBC");
            c = DriverManager.getConnection("jdbc:sqlite:sbc.db");
            c.setAutoCommit(false);
            System.out.println("Opened database successfully");

            stmt = c.createStatement();
            String sql = "UPDATE Books set Title = '" + bookTitle +
                    "', Author = '" + bookAuthor +
                    "', Price = " + bookPrice + 
                    ", OnHandCount = " + bookCount +
                    " where ISBN='" + bookISBN + "';";
            stmt.executeUpdate(sql);
            c.commit();

            stmt.close();
            c.close();
        } catch ( Exception e ) {
             System.err.println( e.getClass().getName() + ": " + e.getMessage() );
            System.exit(0);
        }
        System.out.println("Operation done successfully");
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FinalUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FinalUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FinalUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FinalUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new FinalUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEnterBook;
    private javax.swing.JButton btnEnterEmployee;
    private javax.swing.JButton btnRetrieveEmployee;
    private javax.swing.JButton btnUpdateBook;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblIdCheck;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JTextField txtAuthor;
    private javax.swing.JTextField txtBookId;
    private javax.swing.JTextField txtBookTitle;
    private javax.swing.JTextField txtCost;
    private javax.swing.JTextField txtEmployeeFirstName;
    private javax.swing.JTextField txtEmployeeId;
    private javax.swing.JTextField txtEmployeeLastName;
    private javax.swing.JButton txtRetrieveBook;
    private javax.swing.JTextField txtSalaryPerYear;
    private javax.swing.JTextField txtStock;
    private javax.swing.JButton txtUpdateEmployee;
    private javax.swing.JTextField txtWagePerHour;
    // End of variables declaration//GEN-END:variables
}
